{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","reportWebVitals.js","index.js"],"names":["LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","LAUNCH_QUERY","Launch","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e822fb5d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.91169fa6.png\";","import classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nconst LaunchItem = ({\n  launch: { flight_number, mission_name, launch_date_local, launch_success },\n}) => {\n  return (\n    <div className='card card-body mb-3'>\n      <div className='row'>\n        <div className='col-md-9'>\n          <h4>\n            Mission:{' '}\n            <span\n              className={classNames({\n                'text-success': launch_success,\n                'text-danger': !launch_success,\n              })}\n            >\n              {mission_name}\n            </span>\n          </h4>\n          <p>\n            Date: <Moment format='YYYY-MM-DD HH:mm'>{launch_date_local}</Moment>\n          </p>\n        </div>\n        <div className='col-md-3'>\n          <Link to={`/launch/${flight_number}`} className='btn btn-secondary'>\n            Launch Details\n          </Link>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default LaunchItem;\n","const MissionKey = () => {\n  return (\n    <div className='my-3'>\n      <p>\n        <span className='px-3 mr-2 bg-success' /> = Success\n      </p>\n      <p>\n        <span className='px-3 mr-2 bg-danger' /> = Fail\n      </p>\n    </div>\n  );\n};\n\nexport default MissionKey;\n","import gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey';\n\nconst LAUNCHES_QUERY = gql`\n  query LaunchesQuery {\n    launches {\n      flight_number\n      mission_name\n      launch_date_local\n      launch_success\n    }\n  }\n`;\n\nconst Launches = () => {\n  return (\n    <>\n      <h1 className='display-4 my-3'>Launches</h1>\n      <MissionKey />\n      <Query query={LAUNCHES_QUERY}>\n        {({ loading, error, data }) => {\n          if (loading) return <h4>Loading...</h4>;\n          if (error) console.log(error);\n          return (\n            <>\n              {data.launches.map((launch) => (\n                <LaunchItem\n                  key={launch.flight_number + launch.mission_name}\n                  launch={launch}\n                />\n              ))}\n            </>\n          );\n        }}\n      </Query>\n    </>\n  );\n};\n\nexport default Launches;\n","import gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\nconst LAUNCH_QUERY = gql`\n  query LaunchQuery($flight_number: Int!) {\n    launch(flight_number: $flight_number) {\n      flight_number\n      mission_name\n      launch_year\n      launch_success\n      launch_date_local\n      rocket {\n        rocket_id\n        rocket_name\n        rocket_type\n      }\n    }\n  }\n`;\n\nconst Launch = (props) => {\n  let { flight_number } = props.match.params;\n  flight_number = parseInt(flight_number);\n  return (\n    <>\n      <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\n        {({ loading, error, data }) => {\n          if (loading) return <h4>Loading...</h4>;\n          if (error) console.log(error);\n\n          const {\n            mission_name,\n            flight_number,\n            launch_year,\n            launch_success,\n            rocket: { rocket_id, rocket_name, rocket_type },\n          } = data.launch;\n          return (\n            <div>\n              <h1 className='display-4 my-3'>\n                <span className='text-dark'>Mission:</span> {mission_name}\n              </h1>\n              <h4 className='mb-3'>Launch Details</h4>\n              <ul className='list-group'>\n                <li className='list-group-item'>\n                  Flight Number: {flight_number}\n                </li>\n                <li className='list-group-item'>Launch Year: {launch_year}</li>\n                <li className='list-group-item'>\n                  Launch Successful:{' '}\n                  <span\n                    className={classNames({\n                      'text-success': launch_success,\n                      'text-danger': !launch_success,\n                    })}\n                  >\n                    {launch_success ? 'Yes' : 'No'}\n                  </span>\n                </li>\n              </ul>\n              <h4 className='my-3'>Rocket Details</h4>\n              <ul className='list-group'>\n                <li className='list-group-item'>Rocket ID: {rocket_id}</li>\n                <li className='list-group-item'>Rocket Name: {rocket_name}</li>\n                <li className='list-group-item'>Rocket Type: {rocket_type}</li>\n              </ul>\n              <hr />\n              <Link to='/' className='btn btn-secondary'>\n                Back\n              </Link>\n            </div>\n          );\n        }}\n      </Query>\n    </>\n  );\n};\n\nexport default Launch;\n","import './App.css';\nimport logo from './logo.png';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className='container'>\n          <img\n            src={logo}\n            alt='SpaceX'\n            style={{ width: 300, display: 'block', margin: 'auto' }}\n          />\n          <Route exact path='/' component={Launches} />\n          <Route exact path='/launch/:flight_number' component={Launch} />\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}